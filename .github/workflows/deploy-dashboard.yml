name: Deploy Dashboard to Pi Release Repo

on:
  # Trigger on pushes to main that affect web dashboard files
  push:
    branches: [ main ]
    paths:
      - 'web/**'
      - 'scripts/**'
      - 'kiosk/**'
      - 'deployment/**'
      - 'package*.json'
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  DEPLOY_REPO: sebastienlepoder/cocktail-deploy
  SOURCE_BRANCH: main
  TARGET_BRANCH: main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      continue-on-error: true
        
    - name: Install dependencies
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          npm ci || npm install || echo "Failed to install dependencies"
        else
          echo "No web directory or package.json found, skipping npm install"
        fi
      continue-on-error: true
        
    - name: Build dashboard
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          
          echo "üî® Building Next.js dashboard..."
          
          # Try to build for static export first
          if npm run build 2>&1 | tee build.log; then
            echo "‚úÖ npm run build completed successfully"
            
            # Check if we have static export configured
            if [ -d "out" ]; then
              echo "‚úÖ Found static export in 'out' directory"
            elif [ -d ".next" ]; then
              echo "‚ö†Ô∏è Found .next directory (server build)"
              echo "üí° Attempting static export..."
              
              # Try to run export if it exists
              if npm run export 2>/dev/null; then
                echo "‚úÖ Static export successful"
              else
                echo "üìù Configuring static export in next.config.js..."
                
                # Backup original config
                [ -f next.config.js ] && cp next.config.js next.config.js.bak
                
                # Add static export config
                cat > next.config.js << 'NEXTJS_CONFIG'
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  trailingSlash: true,
  images: {
    unoptimized: true
  },
  assetPrefix: '',
  basePath: '',
  distDir: 'out'
}

module.exports = nextConfig
NEXTJS_CONFIG
                
                echo "üîÑ Rebuilding with static export..."
                npm run build || echo "‚ö†Ô∏è Static export build failed"
              fi
            fi
          else
            echo "‚ö†Ô∏è npm run build failed, check build.log"
            cat build.log 2>/dev/null || true
          fi
          
          # Show what we have after build
          echo "üìÅ Build output directories:"
          ls -la | grep "^d" || echo "No directories found"
          
        else
          echo "No web directory or package.json found, skipping build"
        fi
      continue-on-error: true
        
    - name: Generate version info
      id: version
      run: |
        # Generate version based on git info
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: Create deployment package
      run: |
        # Create deployment directory structure
        mkdir -p deploy/web
        mkdir -p deploy/scripts
        mkdir -p deploy/kiosk
        
        # Copy built web files (prioritize static export over server build)
        if [ -d web/out ] && [ "$(find web/out -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
          echo "‚úÖ Found Next.js static export in web/out/"
          cp -r web/out/. deploy/web/
        elif [ -d web/dist ] && [ "$(find web/dist -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
          echo "‚úÖ Found built files in web/dist/"
          cp -r web/dist/. deploy/web/
        elif [ -d web/build ] && [ "$(find web/build -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
          echo "‚úÖ Found built files in web/build/"
          cp -r web/build/. deploy/web/
        elif [ -d web/.next/static ] && [ "$(find web/.next/static -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
          echo "‚ö†Ô∏è Found Next.js server build, but need static export for nginx"
          echo "üí° Attempting to extract static assets from .next build..."
          
          # Create basic index.html for Next.js server build
          cat > deploy/web/index.html << 'NEXTJS_HTML'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üçπ Cocktail Machine</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            text-align: center;
        }
        .container { max-width: 600px; padding: 40px; }
        .logo { font-size: 120px; margin-bottom: 30px; animation: float 3s ease-in-out infinite; }
        h1 { font-size: 48px; margin-bottom: 20px; font-weight: 300; }
        p { font-size: 18px; margin-bottom: 30px; opacity: 0.9; }
        .status { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px 0; }
        .buttons { margin-top: 30px; }
        .button {
            display: inline-block; background: rgba(255,255,255,0.2); color: white;
            padding: 12px 24px; margin: 0 10px; border-radius: 6px;
            text-decoration: none; transition: background 0.3s;
        }
        .button:hover { background: rgba(255,255,255,0.3); }
        @keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-20px); } }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üçπ</div>
        <h1>Cocktail Machine</h1>
        <p>Your cocktail machine is successfully installed and running!</p>
        <div class="status">
            <h3>üéØ System Status: Online</h3>
            <p>Dashboard built with Next.js server mode</p>
            <p><small>‚ö†Ô∏è Configure static export for full React features</small></p>
        </div>
        <div class="buttons">
            <a href="http://localhost:1880" class="button">üîß Node-RED Dashboard</a>
            <a href="/health" class="button">‚ù§Ô∏è Health Check</a>
        </div>
    </div>
</body>
</html>
NEXTJS_HTML
          
          # Copy static assets if available
          [ -d web/.next/static ] && cp -r web/.next/static deploy/web/_next/ 2>/dev/null || true
          
        elif [ -d web/public ] && [ "$(find web/public -mindepth 1 -maxdepth 1 ! -name '.gitkeep' 2>/dev/null)" ]; then
          echo "üìÅ Found public directory, copying public assets"
          find web/public -mindepth 1 -maxdepth 1 ! -name '.gitkeep' -exec cp -r {} deploy/web/ \;
          
          # Ensure there's an index.html
          if [ ! -f deploy/web/index.html ]; then
            echo "üìÑ Creating index.html in public directory"
            cat > deploy/web/index.html << 'PUBLIC_HTML'
<!DOCTYPE html>
<html><head><title>üçπ Cocktail Machine</title></head>
<body style="font-family: Arial; text-align: center; padding: 50px; background: #2c3e50; color: white;">
    <h1 style="font-size: 48px;">üçπ Cocktail Machine</h1>
    <p>Dashboard ready - public directory deployment</p>
    <a href="http://localhost:1880" style="color: #3498db;">Node-RED Dashboard</a>
</body></html>
PUBLIC_HTML
          fi
          
        else
          echo "‚ùå No built web files found - creating production-ready placeholder"
          cat > deploy/web/index.html << 'FALLBACK_HTML'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üçπ Cocktail Machine</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            display: flex; align-items: center; justify-content: center; height: 100vh; text-align: center;
        }
        .container { max-width: 600px; padding: 40px; }
        .logo { font-size: 120px; margin-bottom: 30px; animation: float 3s ease-in-out infinite; }
        h1 { font-size: 48px; margin-bottom: 20px; font-weight: 300; }
        p { font-size: 18px; margin-bottom: 30px; opacity: 0.9; }
        .status { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px 0; }
        .buttons { margin-top: 30px; }
        .button { display: inline-block; background: rgba(255,255,255,0.2); color: white; padding: 12px 24px; margin: 0 10px; border-radius: 6px; text-decoration: none; transition: background 0.3s; }
        .button:hover { background: rgba(255,255,255,0.3); }
        @keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-20px); } }
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">üçπ</div>
        <h1>Cocktail Machine</h1>
        <p>Your cocktail machine is successfully installed and running!</p>
        <div class="status">
            <h3>‚öôÔ∏è Setup Complete</h3>
            <p>React dashboard will be available after first build</p>
        </div>
        <div class="buttons">
            <a href="http://localhost:1880" class="button">üîß Node-RED Dashboard</a>
            <a href="/health" class="button">‚ù§Ô∏è Health Check</a>
        </div>
        <p style="margin-top: 40px; font-size: 14px; opacity: 0.7;">Configure Next.js static export for full React features</p>
    </div>
</body>
</html>
FALLBACK_HTML
        fi
        
        # Copy additional web resources if they exist
        [ -d web/assets ] && cp -r web/assets deploy/web/ || true
        [ -d web/static ] && cp -r web/static deploy/web/ || true
        
        # Copy deployment and kiosk scripts
        [ -d scripts ] && cp -r scripts/* deploy/scripts/ || true
        [ -d kiosk ] && cp -r kiosk/* deploy/kiosk/ || true
        [ -d deployment ] && find deployment -name "*.sh" -exec cp {} deploy/scripts/ \; 2>/dev/null || true
        
        # Make scripts executable
        find deploy/scripts -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
        
        # Create version file
        echo "${{ steps.version.outputs.version }}" > deploy/web/VERSION
        
        # Create versions.json for the update system
        cat > deploy/web/versions.json << EOF
        {
          "dashboard": {
            "latest": "${{ steps.version.outputs.version }}",
            "artifact": "web.tar.gz",
            "notes": [
              "Updated dashboard from commit $(git rev-parse --short HEAD)",
              "Built on ${{ steps.version.outputs.timestamp }}",
              "Latest features and improvements"
            ]
          },
          "modules": {
            "latest": "v1.0.0",
            "notes": [
              "Stable bottle module firmware",
              "MQTT communication protocol"
            ]
          },
          "backend": {
            "latest": "v1.0.0", 
            "notes": [
              "Node-RED cocktail control flow",
              "MQTT broker and dashboard API"
            ]
          }
        }
        EOF
        
        # Create deployment archive
        cd deploy
        tar -czf web.tar.gz web/
        
    - name: Checkout deployment repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.DEPLOY_REPO }}
        token: ${{ secrets.DEPLOY_TOKEN }}
        path: deploy-repo
        ref: ${{ env.TARGET_BRANCH }}
        
    - name: Update deployment repository
      run: |
        cd deploy-repo
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Remove old files (keep scripts and other non-web content)
        rm -rf web/ || true
        
        # Copy new deployment files
        cp -r ../deploy/* .
        
        # Add all changes
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to deploy"
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "Force deployment requested, creating empty commit"
            git commit --allow-empty -m "Force deployment: ${{ steps.version.outputs.version }}"
          else
            exit 0
          fi
        else
          # Commit changes
          git commit -m "Deploy dashboard ${{ steps.version.outputs.version }}

          - Built from warp-cocktail-machine@$(echo ${{ github.sha }} | head -c 8)
          - Timestamp: ${{ steps.version.outputs.timestamp }}
          - Automated deployment from GitHub Actions"
        fi
        
        # Push changes
        git push origin ${{ env.TARGET_BRANCH }}
        
    - name: Create release summary
      run: |
        echo "## üöÄ Dashboard Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** ${{ steps.version.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "**Target Repository:** ${{ env.DEPLOY_REPO }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì• Pi Users Can Now Update:" >> $GITHUB_STEP_SUMMARY
        echo "1. **Via Node-RED Dashboard:** Go to Updates tab and click 'Install Update'" >> $GITHUB_STEP_SUMMARY
        echo "2. **Via API:** \`curl -X POST http://pi-ip:1880/api/update/now\`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Via Script:** \`sudo /opt/scripts/update_dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "4. **Manual Start:** \`cd ~/cocktail-machine/deployment && ./start-services.sh\`" >> $GITHUB_STEP_SUMMARY
