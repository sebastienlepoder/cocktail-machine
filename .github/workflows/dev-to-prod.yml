name: üöÄ Dev ‚Üí Prod Deployment

on:
  # Manual trigger only - you control when to deploy to production
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'Latest features and improvements'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  PROD_REPO: sebastienlepoder/cocktail-machine-prod
  DEV_REPO: sebastienlepoder/cocktail-machine-dev

jobs:
  dev-to-prod-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Dev Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.DEPLOY_TOKEN }}
        
    - name: üîç Generate Release Version
      id: version
      run: |
        # Get current date for version
        DATE=$(date +%Y.%m.%d)
        TIME=$(date +%H%M)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        # Determine version based on release type
        case "${{ github.event.inputs.release_type }}" in
          "major") VERSION="v${DATE}-major-${COMMIT_HASH}" ;;
          "minor") VERSION="v${DATE}-${TIME}-${COMMIT_HASH}" ;;
          "patch") VERSION="v${DATE}-patch-${COMMIT_HASH}" ;;
        esac
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "üéØ Generated production version: $VERSION"
        
    - name: üèóÔ∏è Setup Node.js (if needed)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      continue-on-error: true
        
    - name: üì¶ Install Dependencies
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          echo "üì• Installing dependencies..."
          npm ci || npm install || echo "‚ö†Ô∏è Failed to install dependencies"
        else
          echo "‚ÑπÔ∏è No web project found, skipping dependencies"
        fi
      continue-on-error: true
        
    - name: üî® Build Dashboard
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          echo "üî® Building dashboard..."
          npm run build || npm run export || echo "‚ö†Ô∏è No build script found"
        else
          echo "‚ÑπÔ∏è No web project found, skipping build"
        fi
      continue-on-error: true
        
    - name: üì¶ Create Production Package
      run: |
        echo "üì¶ Creating production deployment package..."
        
        # Create production directory structure
        mkdir -p prod-deploy/{web,scripts,kiosk}
        
        # Check for pre-packaged web dashboard from cocktail-slider-display repo
        if [ -f "web/LATEST_DEPLOYMENT.json" ] && [ -d "web/packages" ]; then
          echo "üé® Found pre-packaged web dashboard deployment"
          
          # Extract info from deployment metadata
          PACKAGE_FILE=$(jq -r '.package_file' web/LATEST_DEPLOYMENT.json)
          WEB_VERSION=$(jq -r '.latest_version' web/LATEST_DEPLOYMENT.json)
          RELEASE_NOTES=$(jq -r '.release_notes' web/LATEST_DEPLOYMENT.json)
          
          echo "üì¶ Extracting dashboard package: $PACKAGE_FILE"
          echo "üéØ Dashboard version: $WEB_VERSION"
          
          # Extract the packaged dashboard to production
          if [ -f "web/packages/$PACKAGE_FILE" ]; then
            tar -xzf "web/packages/$PACKAGE_FILE" -C prod-deploy/web/
            echo "‚úÖ Successfully extracted pre-built dashboard"
            
            # Update release notes to include web dashboard info
            if [ -n "$RELEASE_NOTES" ] && [ "$RELEASE_NOTES" != "null" ]; then
              echo "web_release_notes=$RELEASE_NOTES" >> $GITHUB_ENV
              echo "web_version=$WEB_VERSION" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå Package file not found: web/packages/$PACKAGE_FILE"
            echo "üìÇ Available packages:"
            ls -la web/packages/ || echo "No packages directory"
            exit 1
          fi
          
        else
          echo "üìÅ No pre-packaged dashboard found, checking for built web files..."
          
          # Fallback: Copy built web files (with multiple fallback options)
          if [ -d web/dist ] && [ "$(find web/dist -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
            echo "üìÅ Copying from web/dist/"
            cp -r web/dist/. prod-deploy/web/
          elif [ -d web/build ] && [ "$(find web/build -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
            echo "üìÅ Copying from web/build/"
            cp -r web/build/. prod-deploy/web/
          elif [ -d web/out ] && [ "$(find web/out -mindepth 1 -maxdepth 1 2>/dev/null)" ]; then
            echo "üìÅ Copying from web/out/"
            cp -r web/out/. prod-deploy/web/
          elif [ -d web/public ] && [ "$(find web/public -mindepth 1 -maxdepth 1 ! -name '.gitkeep' 2>/dev/null)" ]; then
            echo "üìÅ Copying from web/public/ (excluding .gitkeep)"
            find web/public -mindepth 1 -maxdepth 1 ! -name '.gitkeep' -exec cp -r {} prod-deploy/web/ \;
          elif [ -d web ] && [ "$(find web -mindepth 1 -maxdepth 1 -type f 2>/dev/null)" ]; then
            echo "üìÅ Copying web source files"
            find web -mindepth 1 -maxdepth 1 -type f -exec cp {} prod-deploy/web/ \;
          else
            echo "üìÑ Creating placeholder dashboard"
            cat > prod-deploy/web/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üçπ Cocktail Machine</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; margin: 0; }
                h1 { font-size: 3em; margin-bottom: 20px; }
                p { font-size: 1.2em; margin-bottom: 30px; }
                .status { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; margin: 20px auto; max-width: 500px; }
            </style>
        </head>
        <body>
            <h1>üçπ Cocktail Machine</h1>
            <div class="status">
                <h2>System Ready</h2>
                <p>Your cocktail machine dashboard will be available soon!</p>
                <p><strong>Version:</strong> ${{ steps.version.outputs.version }}</p>
            </div>
            <p><a href="http://localhost:1880/ui" style="color: #fff;">Node-RED Dashboard</a></p>
        </body>
        </html>
        EOF
          fi
        fi
        
        # Copy deployment scripts
        echo "üìú Copying scripts..."
        [ -d scripts ] && cp -r scripts/* prod-deploy/scripts/ 2>/dev/null || true
        [ -d deployment ] && find deployment -name "*.sh" -exec cp {} prod-deploy/scripts/ \; 2>/dev/null || true
        
        # Copy kiosk files
        echo "üñ•Ô∏è Copying kiosk files..."
        [ -d kiosk ] && cp -r kiosk/* prod-deploy/kiosk/ 2>/dev/null || true
        
        # Copy Node-RED flows
        echo "üî¥ Copying Node-RED flows..."
        if [ -d node-red ]; then
          mkdir -p prod-deploy/nodered
          cp -r node-red/* prod-deploy/nodered/ 2>/dev/null || true
          echo "‚úÖ Node-RED flows copied to production package"
        else
          echo "‚ö†Ô∏è No Node-RED directory found, skipping"
        fi
        
        # Make all scripts executable
        find prod-deploy/scripts -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
        
        # Create production VERSION file
        echo "${{ steps.version.outputs.version }}" > prod-deploy/web/VERSION
        
        # Create production versions.json
        cat > prod-deploy/web/versions.json << EOF
        {
          "dashboard": {
            "latest": "${{ steps.version.outputs.version }}",
            "artifact": "web.tar.gz",
            "notes": [
              "${{ github.event.inputs.release_notes }}",
              "Released on ${{ steps.version.outputs.timestamp }}",
              "Built from dev commit $(git rev-parse --short HEAD)",
              "Release type: ${{ github.event.inputs.release_type }}"
            ]
          },
          "modules": {
            "latest": "v1.0.0",
            "notes": [
              "ESP32 bottle module firmware",
              "MQTT communication protocol",
              "Pump control and liquid level sensing"
            ]
          },
          "backend": {
            "latest": "v1.0.0", 
            "notes": [
              "Node-RED cocktail control flow",
              "MQTT broker and dashboard API",
              "Module management system"
            ]
          },
          "release": {
            "type": "${{ github.event.inputs.release_type }}",
            "timestamp": "${{ steps.version.outputs.timestamp }}",
            "dev_repo": "${{ env.DEV_REPO }}",
            "dev_commit": "$(git rev-parse HEAD)"
          }
        }
        EOF
        
        # Create compressed archive
        cd prod-deploy
        tar -czf web.tar.gz web/
        ls -la
        echo "‚úÖ Production package created successfully!"
        
    - name: üì§ Checkout Production Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.PROD_REPO }}
        token: ${{ secrets.DEPLOY_TOKEN }}
        path: prod-repo
        ref: main
        
    - name: üöÄ Deploy to Production
      run: |
        cd prod-repo
        
        echo "üîß Configuring git for deployment..."
        git config user.name "Dev‚ÜíProd Deployment"
        git config user.email "actions@github.com"
        
        echo "üßπ Cleaning old production files..."
        # Keep README but remove old deployments
        find . -mindepth 1 -maxdepth 1 ! -name 'README.md' ! -name '.git' -exec rm -rf {} + || true
        
        echo "üìã Copying new production files..."
        cp -r ../prod-deploy/* .
        
        echo "üìù Adding deployment info to README..."
        cat > README.md << 'EOF'
        # üçπ Cocktail Machine - Production Release
        
        **Latest Version:** `${{ steps.version.outputs.version }}`  
        **Release Type:** ${{ github.event.inputs.release_type }}  
        **Released:** ${{ steps.version.outputs.timestamp }}  
        **From Dev Repo:** [${{ env.DEV_REPO }}](https://github.com/${{ env.DEV_REPO }})
        
        ## üöÄ For Pi Users
        
        ### Quick Installation
        ```bash
        curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/setup-ultimate.sh | bash
        ```
        
        ### Update Your System
        ```bash
        # Via Node-RED Dashboard (Recommended)
        # Go to: http://your-pi-ip:1880/ui ‚Üí Updates tab ‚Üí Install Update
        
        # Or via command line
        sudo /opt/scripts/update_dashboard.sh
        ```
        
        ## üìã Release Notes
        
        ${{ github.event.inputs.release_notes }}
        
        ## üîÑ Update Methods
        
        1. **Node-RED Dashboard** - Easy web interface at `http://pi-ip:1880/ui`
        2. **API Endpoint** - `curl -X POST http://pi-ip:1880/api/update/now`  
        3. **Update Script** - `sudo /opt/scripts/update_dashboard.sh`
        4. **Quick Update** - `sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/quick-update.sh)"`
        5. **Manual Start** - `cd ~/cocktail-machine-dev/deployment && ./start-services.sh`
        
        ## üì¶ Contents
        
        - **`web/`** - Dashboard application (version ${{ steps.version.outputs.version }})
        - **`nodered/`** - Node-RED flows and configuration
        - **`scripts/`** - Installation and update scripts  
        - **`kiosk/`** - Kiosk mode configuration
        - **`web.tar.gz`** - Compressed deployment archive
        
        ---
        
        *ü§ñ Automatically deployed from dev repository via GitHub Actions*  
        *‚è∞ Last updated: ${{ steps.version.outputs.timestamp }}*
        EOF
        
        echo "‚ûï Adding all changes to git..."
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "üîÑ Force deployment requested - creating deployment commit"
            git commit --allow-empty -m "üöÄ Force deployment: ${{ steps.version.outputs.version }}"
          else
            echo "‚ÑπÔ∏è No changes detected - skipping deployment"
            echo "üí° Use 'force_deploy' option if you want to deploy anyway"
            exit 0
          fi
        else
          echo "üíæ Committing production release..."
          git commit -m "üöÄ Production Release: ${{ steps.version.outputs.version }}

        üì¶ Release Details:
        - Version: ${{ steps.version.outputs.version }}
        - Type: ${{ github.event.inputs.release_type }}
        - Timestamp: ${{ steps.version.outputs.timestamp }}
        - Dev Commit: $(cd .. && git rev-parse --short HEAD)
        
        üìù Release Notes:
        ${{ github.event.inputs.release_notes }}
        
        üîÑ Deployment triggered manually from dev repository
        üéØ Ready for Pi user installations and updates!"
        fi
        
        echo "üöÄ Pushing to production repository..."
        git push origin main
        
        echo "‚úÖ Production deployment completed successfully!"
        
    - name: üìä Deployment Summary
      run: |
        echo "## üéâ Dev ‚Üí Prod Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üè∑Ô∏è Production Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**üì¶ Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY  
        echo "**‚è∞ Deployed:** ${{ steps.version.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "**üéØ Production Repo:** [${{ env.PROD_REPO }}](https://github.com/${{ env.PROD_REPO }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìù Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì• Pi Users Can Now:" >> $GITHUB_STEP_SUMMARY
        echo "1. **Install Fresh:** \`curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/setup-ultimate.sh | bash\`" >> $GITHUB_STEP_SUMMARY
        echo "2. **Update Existing:** Go to Node-RED Dashboard ‚Üí Updates Tab ‚Üí Install Update" >> $GITHUB_STEP_SUMMARY
        echo "3. **Manual Update:** \`sudo /opt/scripts/update_dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéâ **Production deployment is live and ready for users!**" >> $GITHUB_STEP_SUMMARY
