name: 🚀 Dev → Prod Deployment

on:
  # Manual trigger only - you control when to deploy to production
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'Latest features and improvements'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  PROD_REPO: sebastienlepoder/cocktail-machine-prod
  DEV_REPO: sebastienlepoder/cocktail-machine-dev

jobs:
  dev-to-prod-deployment:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Dev Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.DEPLOY_TOKEN }}
        
    - name: 🔍 Generate Release Version
      id: version
      run: |
        # Get current date for version
        DATE=$(date +%Y.%m.%d)
        TIME=$(date +%H%M)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        # Determine version based on release type
        case "${{ github.event.inputs.release_type }}" in
          "major") VERSION="v${DATE}-major-${COMMIT_HASH}" ;;
          "minor") VERSION="v${DATE}-${TIME}-${COMMIT_HASH}" ;;
          "patch") VERSION="v${DATE}-patch-${COMMIT_HASH}" ;;
        esac
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
        echo "🎯 Generated production version: $VERSION"
        
    - name: 🏗️ Setup Node.js (if needed)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
      continue-on-error: true
        
    - name: 📦 Install Dependencies
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          echo "📥 Installing dependencies..."
          npm ci || npm install || echo "⚠️ Failed to install dependencies"
        else
          echo "ℹ️ No web project found, skipping dependencies"
        fi
      continue-on-error: true
        
    - name: 🔨 Build Dashboard
      run: |
        if [ -d web ] && [ -f web/package.json ]; then
          cd web
          echo "🔨 Building dashboard..."
          npm run build || npm run export || echo "⚠️ No build script found"
        else
          echo "ℹ️ No web project found, skipping build"
        fi
      continue-on-error: true
        
    - name: 📦 Create Production Package (Mirror Dev Repo)
      run: |
        echo "📦 Creating production deployment package (exact copy of dev repo)..."
        
        # Create production directory - exact mirror of dev
        mkdir -p prod-deploy
        
        # Copy entire repository structure as-is
        echo "💷 Copying entire dev repository structure..."
        
        # Copy all directories and files, preserving structure
        [ -d web ] && cp -r web prod-deploy/ || echo "⚠️ No web directory"
        [ -d node-red ] && cp -r node-red prod-deploy/ || echo "⚠️ No node-red directory"
        [ -d scripts ] && cp -r scripts prod-deploy/ || echo "⚠️ No scripts directory"
        [ -d deployment ] && cp -r deployment prod-deploy/ || echo "⚠️ No deployment directory"
        [ -d kiosk ] && cp -r kiosk prod-deploy/ || echo "⚠️ No kiosk directory"
        [ -d esp32 ] && cp -r esp32 prod-deploy/ || echo "⚠️ No esp32 directory"
        [ -d data ] && cp -r data prod-deploy/ || echo "⚠️ No data directory"
        [ -d docs ] && cp -r docs prod-deploy/ || echo "⚠️ No docs directory"
        [ -d config ] && cp -r config prod-deploy/ || echo "⚠️ No config directory"
        [ -d src ] && cp -r src prod-deploy/ || echo "⚠️ No src directory"
        [ -d tests ] && cp -r tests prod-deploy/ || echo "⚠️ No tests directory"
        
        # Copy root files
        cp *.md prod-deploy/ 2>/dev/null || echo "⚠️ No markdown files to copy"
        cp *.yml prod-deploy/ 2>/dev/null || echo "⚠️ No yaml files to copy"
        cp *.json prod-deploy/ 2>/dev/null || echo "⚠️ No json files to copy"
        cp *.txt prod-deploy/ 2>/dev/null || echo "⚠️ No text files to copy"
        cp *.sh prod-deploy/ 2>/dev/null || echo "⚠️ No shell scripts in root to copy"
        cp .gitignore prod-deploy/ 2>/dev/null || echo "⚠️ No .gitignore to copy"
        
        # Make all scripts executable
        find prod-deploy -name "*.sh" -exec chmod +x {} \; 2>/dev/null || true
        
        # Add version info
        echo "${{ steps.version.outputs.version }}" > prod-deploy/VERSION
        
        # Create versions.json for update system
        cat > prod-deploy/versions.json << EOF
        {
          "latest": "${{ steps.version.outputs.version }}",
          "release_type": "${{ github.event.inputs.release_type }}",
          "release_notes": "${{ github.event.inputs.release_notes }}",
          "timestamp": "${{ steps.version.outputs.timestamp }}",
          "dev_repo": "${{ env.DEV_REPO }}",
          "dev_commit": "$(git rev-parse HEAD)",
          "dev_commit_short": "$(git rev-parse --short HEAD)"
        }
        EOF
        
        cd prod-deploy
        ls -la
        echo "✅ Production package created (exact mirror of dev repository)!"
        
    - name: 📤 Checkout Production Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.PROD_REPO }}
        token: ${{ secrets.DEPLOY_TOKEN }}
        path: prod-repo
        ref: main
        
    - name: 🚀 Deploy to Production
      run: |
        cd prod-repo
        
        echo "🔧 Configuring git for deployment..."
        git config user.name "Dev→Prod Deployment"
        git config user.email "actions@github.com"
        
        echo "🧹 Cleaning old production files..."
        # Keep README but remove old deployments
        find . -mindepth 1 -maxdepth 1 ! -name 'README.md' ! -name '.git' -exec rm -rf {} + || true
        
        echo "📋 Copying new production files..."
        cp -r ../prod-deploy/* .
        
        echo "📝 Adding deployment info to README..."
        cat > README.md << 'EOF'
        # 🍹 Cocktail Machine - Production Release
        
        **Latest Version:** `${{ steps.version.outputs.version }}`  
        **Release Type:** ${{ github.event.inputs.release_type }}  
        **Released:** ${{ steps.version.outputs.timestamp }}  
        **From Dev Repo:** [${{ env.DEV_REPO }}](https://github.com/${{ env.DEV_REPO }})
        
        ## 🚀 For Pi Users
        
        ### Quick Installation
        ```bash
        curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/setup-ultimate.sh | bash
        ```
        
        ### Update Your System
        ```bash
        # Via Node-RED Dashboard (Recommended)
        # Go to: http://your-pi-ip:1880/ui → Updates tab → Install Update
        
        # Or via command line
        sudo /opt/scripts/update_dashboard.sh
        ```
        
        ## 📋 Release Notes
        
        ${{ github.event.inputs.release_notes }}
        
        ## 🔄 Update Methods
        
        1. **Node-RED Dashboard** - Easy web interface at `http://pi-ip:1880/ui`
        2. **API Endpoint** - `curl -X POST http://pi-ip:1880/api/update/now`  
        3. **Update Script** - `sudo /opt/scripts/update_dashboard.sh`
        4. **Quick Update** - `sudo bash -c "$(curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/quick-update.sh)"`
        5. **Manual Start** - `cd ~/cocktail-machine-dev/deployment && ./start-services.sh`
        
        ## 📦 Contents
        
        - **`web/`** - Dashboard application (version ${{ steps.version.outputs.version }})
        - **`nodered/`** - Node-RED flows and configuration
        - **`scripts/`** - Installation and update scripts  
        - **`kiosk/`** - Kiosk mode configuration
        - **`web.tar.gz`** - Compressed deployment archive
        
        ---
        
        *🤖 Automatically deployed from dev repository via GitHub Actions*  
        *⏰ Last updated: ${{ steps.version.outputs.timestamp }}*
        EOF
        
        echo "➕ Adding all changes to git..."
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "🔄 Force deployment requested - creating deployment commit"
            git commit --allow-empty -m "🚀 Force deployment: ${{ steps.version.outputs.version }}"
          else
            echo "ℹ️ No changes detected - skipping deployment"
            echo "💡 Use 'force_deploy' option if you want to deploy anyway"
            exit 0
          fi
        else
          echo "💾 Committing production release..."
          git commit -m "🚀 Production Release: ${{ steps.version.outputs.version }}

        📦 Release Details:
        - Version: ${{ steps.version.outputs.version }}
        - Type: ${{ github.event.inputs.release_type }}
        - Timestamp: ${{ steps.version.outputs.timestamp }}
        - Dev Commit: $(cd .. && git rev-parse --short HEAD)
        
        📝 Release Notes:
        ${{ github.event.inputs.release_notes }}
        
        🔄 Deployment triggered manually from dev repository
        🎯 Ready for Pi user installations and updates!"
        fi
        
        echo "🚀 Pushing to production repository..."
        git push origin main
        
        echo "✅ Production deployment completed successfully!"
        
    - name: 📊 Deployment Summary
      run: |
        echo "## 🎉 Dev → Prod Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🏷️ Production Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**📦 Release Type:** ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY  
        echo "**⏰ Deployed:** ${{ steps.version.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "**🎯 Production Repo:** [${{ env.PROD_REPO }}](https://github.com/${{ env.PROD_REPO }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Release Notes" >> $GITHUB_STEP_SUMMARY
        echo "${{ github.event.inputs.release_notes }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Pi Users Can Now:" >> $GITHUB_STEP_SUMMARY
        echo "1. **Install Fresh:** \`curl -fsSL https://raw.githubusercontent.com/${{ env.PROD_REPO }}/main/scripts/setup-ultimate.sh | bash\`" >> $GITHUB_STEP_SUMMARY
        echo "2. **Update Existing:** Go to Node-RED Dashboard → Updates Tab → Install Update" >> $GITHUB_STEP_SUMMARY
        echo "3. **Manual Update:** \`sudo /opt/scripts/update_dashboard.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎉 **Production deployment is live and ready for users!**" >> $GITHUB_STEP_SUMMARY
