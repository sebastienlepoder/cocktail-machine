[
  {
    "id": "main-flow",
    "label": "Cocktail Machine Control",
    "nodes": [
      {
        "id": "mqtt-status",
        "type": "mqtt in",
        "z": "main-flow",
        "name": "Bottle Status",
        "topic": "cocktail/module/+/status",
        "qos": "0",
        "broker": "mqtt-broker",
        "x": 100,
        "y": 100,
        "wires": [["status-processor"]]
      },
      {
        "id": "mqtt-levels",
        "type": "mqtt in", 
        "z": "main-flow",
        "name": "Bottle Levels",
        "topic": "cocktail/module/+/level",
        "qos": "0",
        "broker": "mqtt-broker",
        "x": 100,
        "y": 160,
        "wires": [["level-processor"]]
      },
      {
        "id": "status-processor",
        "type": "function",
        "z": "main-flow",
        "name": "Process Status",
        "func": "// Process bottle status updates\nconst payload = JSON.parse(msg.payload);\nconst moduleId = payload.module_id;\n\n// Store in context for web dashboard\nconst bottles = flow.get('bottles') || {};\nbottles[moduleId] = {\n  ...bottles[moduleId],\n  status: payload.status,\n  wifi_connected: payload.wifi_connected,\n  mqtt_connected: payload.mqtt_connected,\n  ip_address: payload.ip_address,\n  last_seen: new Date().toISOString()\n};\n\nflow.set('bottles', bottles);\n\n// Forward to database storage\nmsg.table = 'bottle_status';\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "x": 300,
        "y": 100,
        "wires": [["status-debug"]]
      },
      {
        "id": "level-processor", 
        "type": "function",
        "z": "main-flow",
        "name": "Process Levels",
        "func": "// Process bottle level updates\nconst payload = JSON.parse(msg.payload);\nconst moduleId = payload.module_id;\n\n// Store in context\nconst bottles = flow.get('bottles') || {};\nbottles[moduleId] = {\n  ...bottles[moduleId],\n  level_percent: payload.level_percent,\n  level_ml: payload.level_ml,\n  last_level_update: new Date().toISOString()\n};\n\nflow.set('bottles', bottles);\n\n// Check for low level alerts\nif (payload.level_percent < 20) {\n  node.warn(`Low level alert: ${moduleId} at ${payload.level_percent}%`);\n  \n  // Send alert\n  const alertMsg = {\n    payload: {\n      type: 'low_level_alert',\n      module_id: moduleId,\n      level: payload.level_percent,\n      timestamp: new Date().toISOString()\n    },\n    topic: 'cocktail/alerts/low_level'\n  };\n  \n  node.send([msg, alertMsg]);\n  return;\n}\n\nreturn msg;",
        "outputs": 1,
        "x": 300,
        "y": 160,
        "wires": [["level-debug"]]
      },
      {
        "id": "recipe-api",
        "type": "http in",
        "z": "main-flow", 
        "name": "Recipe Execute API",
        "url": "/api/recipe/execute",
        "method": "post",
        "x": 100,
        "y": 300,
        "wires": [["recipe-processor"]]
      },
      {
        "id": "recipe-processor",
        "type": "function",
        "z": "main-flow",
        "name": "Execute Recipe",
        "func": "// Execute cocktail recipe\nconst recipe = msg.payload;\nconst bottles = flow.get('bottles') || {};\n\n// Validate ingredients are available\nfor (const ingredient of recipe.ingredients) {\n  const bottle = bottles[ingredient.bottle_id];\n  if (!bottle || bottle.status !== 'online' || bottle.level_percent < 10) {\n    msg.statusCode = 400;\n    msg.payload = {\n      error: 'Ingredient unavailable',\n      ingredient: ingredient.bottle_id,\n      bottle_status: bottle?.status || 'unknown'\n    };\n    return msg;\n  }\n}\n\n// Calculate pump times based on amounts\nconst commands = [];\nfor (const ingredient of recipe.ingredients) {\n  const pumpTimeMs = (ingredient.amount / 10) * 1000; // 10ml/second\n  \n  commands.push({\n    topic: `cocktail/module/${ingredient.bottle_id}/pump/command`,\n    payload: JSON.stringify({\n      action: 'start',\n      duration_ms: pumpTimeMs,\n      speed: 255,\n      recipe_id: recipe.id,\n      timestamp: Date.now()\n    })\n  });\n}\n\n// Store recipe execution\nconst execution = {\n  recipe_id: recipe.id,\n  recipe_name: recipe.name,\n  ingredients: recipe.ingredients,\n  status: 'executing',\n  start_time: new Date().toISOString(),\n  commands: commands\n};\n\nflow.set('current_execution', execution);\n\n// Send pump commands\nmsg.payload = {\n  status: 'started',\n  recipe: recipe.name,\n  estimated_time: Math.max(...commands.map(c => JSON.parse(c.payload).duration_ms)) / 1000,\n  execution_id: execution.start_time\n};\n\n// Send commands to MQTT\nfor (const cmd of commands) {\n  node.send([null, cmd]);\n}\n\nreturn msg;",
        "outputs": 2,
        "x": 300,
        "y": 300,
        "wires": [["recipe-response"], ["mqtt-pump-out"]]
      },
      {
        "id": "recipe-response",
        "type": "http response",
        "z": "main-flow",
        "name": "Recipe Response", 
        "x": 520,
        "y": 300,
        "wires": []
      },
      {
        "id": "mqtt-pump-out",
        "type": "mqtt out",
        "z": "main-flow",
        "name": "Pump Commands",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "mqtt-broker",
        "x": 520,
        "y": 360,
        "wires": []
      },
      {
        "id": "status-debug",
        "type": "debug",
        "z": "main-flow",
        "name": "Status Debug",
        "x": 520,
        "y": 100,
        "wires": []
      },
      {
        "id": "level-debug", 
        "type": "debug",
        "z": "main-flow",
        "name": "Level Debug",
        "x": 520,
        "y": 160,
        "wires": []
      }
    ]
  },
  {
    "id": "update-flow",
    "label": "System Update Management",
    "nodes": [
      {
        "id": "update-check-api",
        "type": "http in",
        "z": "update-flow",
        "name": "Update Status API",
        "url": "/api/update/status",
        "method": "get",
        "x": 100,
        "y": 100,
        "wires": [["check-update-status"]]
      },
      {
        "id": "update-install-api",
        "type": "http in",
        "z": "update-flow",
        "name": "Install Update API",
        "url": "/api/update/now",
        "method": "post",
        "x": 100,
        "y": 160,
        "wires": [["install-update"]]
      },
      {
        "id": "check-update-status",
        "type": "function",
        "z": "update-flow",
        "name": "Check Update Status",
        "func": "// Check for available updates\nconst fs = require('fs');\nconst https = require('https');\n\n// Read current version\nlet currentVersion = '1.0.0';\ntry {\n  const versionFile = fs.readFileSync('/opt/webroot/VERSION', 'utf8');\n  currentVersion = versionFile.trim();\n} catch (err) {\n  node.warn('Could not read current version');\n}\n\n// Check remote versions\nconst options = {\n  hostname: 'raw.githubusercontent.com',\n  path: '/sebastienlepoder/cocktail-machine-prod/main/web/versions.json',\n  method: 'GET'\n};\n\nconst req = https.request(options, (res) => {\n  let data = '';\n  res.on('data', (chunk) => { data += chunk; });\n  res.on('end', () => {\n    try {\n      const versions = JSON.parse(data);\n      const latestVersion = versions.dashboard.latest;\n      const hasUpdate = currentVersion !== latestVersion;\n      \n      msg.payload = {\n        current_version: currentVersion,\n        latest_version: latestVersion,\n        update_available: hasUpdate,\n        release_notes: versions.dashboard.notes || [],\n        last_check: new Date().toISOString()\n      };\n      \n      // Store update info in context\n      flow.set('update_status', msg.payload);\n      \n      node.send(msg);\n    } catch (err) {\n      msg.payload = {\n        error: 'Failed to check for updates',\n        current_version: currentVersion,\n        last_check: new Date().toISOString()\n      };\n      node.send(msg);\n    }\n  });\n});\n\nreq.on('error', (err) => {\n  msg.payload = {\n    error: 'Network error checking updates',\n    current_version: currentVersion,\n    last_check: new Date().toISOString()\n  };\n  node.send(msg);\n});\n\nreq.end();\n\nreturn null; // Async response",
        "outputs": 1,
        "x": 320,
        "y": 100,
        "wires": [["update-status-response"]]
      },
      {
        "id": "install-update",
        "type": "function", 
        "z": "update-flow",
        "name": "Install Update",
        "func": "// Trigger system update script\nconst { exec } = require('child_process');\n\nmsg.payload = {\n  status: 'starting',\n  message: 'Update process initiated',\n  timestamp: new Date().toISOString()\n};\n\n// Run the update script in background\nexec('sudo /opt/scripts/update_dashboard.sh', (error, stdout, stderr) => {\n  if (error) {\n    node.error(`Update failed: ${error.message}`);\n    return;\n  }\n  \n  node.log('Update process completed');\n  node.log(`stdout: ${stdout}`);\n  if (stderr) node.warn(`stderr: ${stderr}`);\n});\n\nreturn msg;",
        "outputs": 1,
        "x": 320,
        "y": 160,
        "wires": [["update-install-response"]]
      },
      {
        "id": "update-status-response",
        "type": "http response",
        "z": "update-flow",
        "name": "Update Status Response",
        "x": 550,
        "y": 100,
        "wires": []
      },
      {
        "id": "update-install-response",
        "type": "http response",
        "z": "update-flow",
        "name": "Update Install Response",
        "x": 550,
        "y": 160,
        "wires": []
      },
      {
        "id": "auto-update-timer",
        "type": "inject",
        "z": "update-flow",
        "name": "Auto Update Check",
        "props": [{"p": "payload"}, {"p": "topic", "vt": "str"}],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 30,
        "topic": "auto-check",
        "payload": "{}",
        "payloadType": "json",
        "x": 100,
        "y": 220,
        "wires": [["check-update-status"]]
      }
    ]
  },
  {
    "id": "dashboard-flow",
    "label": "Web Dashboard UI",
    "nodes": [
      {
        "id": "ui-bottles-status",
        "type": "ui_template",
        "z": "dashboard-flow",
        "group": "bottles-group",
        "name": "Bottles Status",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 320,
        "y": 100,
        "wires": [[]]
      },
      {
        "id": "bottles-status-inject",
        "type": "inject",
        "z": "dashboard-flow",
        "name": "Update Bottles Display",
        "props": [{"p": "payload"}],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [["bottles-formatter"]]
      },
      {
        "id": "bottles-formatter",
        "type": "function",
        "z": "dashboard-flow",
        "name": "Format Bottles Display",
        "func": "// Generate bottles status HTML\nconst bottles = flow.get('bottles') || {};\n\nlet html = '<h3>🍹 Bottle Status</h3>';\n\nif (Object.keys(bottles).length === 0) {\n  html += '<p>No bottles detected yet...</p>';\n} else {\n  html += '<div style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;\">';\n  \n  Object.entries(bottles).forEach(([id, bottle]) => {\n    const statusColor = bottle.status === 'online' ? 'green' : 'red';\n    const levelColor = bottle.level_percent > 50 ? 'green' : bottle.level_percent > 20 ? 'orange' : 'red';\n    \n    html += `\n      <div style=\"border: 1px solid #ddd; padding: 10px; border-radius: 5px;\">\n        <h4>${id}</h4>\n        <p>Status: <span style=\"color: ${statusColor}\">● ${bottle.status || 'unknown'}</span></p>\n        <p>Level: <span style=\"color: ${levelColor}\">${bottle.level_percent || 0}%</span></p>\n        <p>WiFi: ${bottle.wifi_connected ? '✅' : '❌'}</p>\n        <p>MQTT: ${bottle.mqtt_connected ? '✅' : '❌'}</p>\n        <p>IP: ${bottle.ip_address || 'Unknown'}</p>\n        <small>Last seen: ${bottle.last_seen ? new Date(bottle.last_seen).toLocaleString() : 'Never'}</small>\n      </div>\n    `;\n  });\n  \n  html += '</div>';\n}\n\nmsg.payload = html;\nreturn msg;",
        "outputs": 1,
        "x": 320,
        "y": 100,
        "wires": [["ui-bottles-status"]]
      },
      {
        "id": "ui-update-status",
        "type": "ui_template",
        "z": "dashboard-flow",
        "group": "system-group",
        "name": "Update Status",
        "order": 2,
        "width": "6",
        "height": "4",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 550,
        "y": 200,
        "wires": [[]]
      },
      {
        "id": "update-button",
        "type": "ui_button",
        "z": "dashboard-flow",
        "name": "Install Update",
        "group": "system-group",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Install Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{}",
        "payloadType": "json",
        "topic": "update",
        "x": 100,
        "y": 200,
        "wires": [["install-update"]]
      },
      {
        "id": "check-update-button",
        "type": "ui_button",
        "z": "dashboard-flow",
        "name": "Check Updates",
        "group": "system-group",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Check Updates",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{}",
        "payloadType": "json",
        "topic": "check",
        "x": 100,
        "y": 260,
        "wires": [["check-update-status"]]
      },
      {
        "id": "update-status-formatter",
        "type": "function",
        "z": "dashboard-flow",
        "name": "Format Update Status",
        "func": "// Format update status for UI\nconst updateStatus = flow.get('update_status') || {\n  current_version: 'Unknown',\n  update_available: false,\n  last_check: 'Never'\n};\n\nlet html = '<h4>🔄 System Updates</h4>';\nhtml += `<p><strong>Current Version:</strong> ${updateStatus.current_version}</p>`;\n\nif (updateStatus.update_available) {\n  html += `<p style=\"color: orange;\">📦 Update Available: ${updateStatus.latest_version}</p>`;\n  if (updateStatus.release_notes && updateStatus.release_notes.length > 0) {\n    html += '<p><strong>Release Notes:</strong></p><ul>';\n    updateStatus.release_notes.slice(0, 3).forEach(note => {\n      html += `<li>${note}</li>`;\n    });\n    html += '</ul>';\n  }\n} else {\n  html += '<p style=\"color: green;\">✅ System is up to date</p>';\n}\n\nhtml += `<p><small>Last checked: ${updateStatus.last_check ? new Date(updateStatus.last_check).toLocaleString() : 'Never'}</small></p>`;\n\nmsg.payload = html;\nreturn msg;",
        "outputs": 1,
        "x": 320,
        "y": 200,
        "wires": [["ui-update-status"]]
      },
      {
        "id": "update-status-timer",
        "type": "inject",
        "z": "dashboard-flow",
        "name": "Update UI Timer",
        "props": [{"p": "payload"}],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [["update-status-formatter"]]
      }
    ]
  },
  {
    "id": "mqtt-broker",
    "type": "mqtt-broker",
    "name": "Cocktail MQTT Broker",
    "broker": "mosquitto",
    "port": "1883",
    "clientid": "nodered-cocktail",
    "usetls": false,
    "verifyservercert": true,
    "compatmode": false,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "cocktail/nodered/status",
    "birthQos": "0",
    "birthPayload": "online",
    "closeTopic": "cocktail/nodered/status", 
    "closeQos": "0",
    "closePayload": "offline",
    "willTopic": "cocktail/nodered/status",
    "willQos": "0",
    "willPayload": "offline"
  },
  {
    "id": "bottles-group",
    "type": "ui_group",
    "name": "Bottle Management",
    "tab": "main-tab",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "system-group",
    "type": "ui_group",
    "name": "System Management",
    "tab": "main-tab",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "main-tab",
    "type": "ui_tab",
    "name": "Cocktail Machine",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  }
]
